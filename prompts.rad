(def i (ref 0))

(def prompts
  [
"r a d i c l e
-------------

A scripting language for append-only logs

James Haydon - Monadic
               Open Source Coin

www.radicle.xyz
June 11: Meetup at Full Node"
   
"Append-only, non-forgeable logs!
(SSB, DAT, OrbitDB, ...)

Of DATA.

Radicle: Code which interprets/validates
data lives with the data."

"Radicle:
- LISP: code = data
- data and its code living in the same place
- \"Radicle machines\""

"demo!"
])

(def next
  (fn []
    (put-str! "")
    (put-str! (nth (read-ref i) prompts))
    (put-str! "\n------\n")
    (modify-ref i \(+ 1 ?))))
