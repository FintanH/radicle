{:module 'prelude/io-utils
 :doc "IO-related utilities"
 :exports '[fzf-select! edit-in-editor!]}

(import prelude/io '[shell-with-stdout! write-file!] :unqualified)
(import prelude/strings '[unlines] :unqualified)

(def fzf-select!
  "Select one of many strings with `fzf`.
  Requires that `fzf` be on the path.
  Returns `[:just x]` where `x` is the selected string, or `:nothing` if nothing
  was selected."
  (fn [xs]
    (def result (process-with-stdout! "fzf" [] (string-append (unlines xs) "\n")))
    (match result
           [] :nothing
           ['x] [:just (string-replace "\n" "" x)])))

(def fzf-select-with-preview!
  "Like `fzf-select!`, but includes a preview defined by `prev-fn`."
  (fn [xs prev-fn]
    (def temp-file (first (process-with-stdout! "mktemp" [] "")))
    (def escape-str
      (fn [s] (string-replace "\t" "\\t" (string-replace "\n" "\\n" s))))
    (def unescape-str
      (fn [s] (string-replace "\\t" "\t" (string-replace "\\n" "\n" s))))
    (def contents
      (unlines
        (map
          (fn [x] (string-append (escape-str x) "\t" (escape-str (prev-fn x))))
          xs)))
    (write-file! temp-file contents)
    (def preview ["--preview" (string-append "awk -F'\t' '$1 == \"{}\" { print $2 }' " temp-file)])
    (def preview ["--preview" "echo {}"])
    (print! preview)
    (def result (process-with-stdout! "fzf" preview (unlines xs)))
    (match result
           [] :nothing
           ['x] [:just (string-replace "\n" "" x)])))

(def edit-in-editor!
  "Open `$EDITOR` on a file prepopulated with `orig`. Returns the contents of the edited file when the editor exits."
  (fn [orig]
    (def file (unlines (shell-with-stdout! "mktemp" "")))
    (put-str! file)
    (write-file! file orig)
    (shell-no-stdin! (string-append "${EDITOR:-nano} " file) "")
    (read-file! file)))
