(def match-pat
  "The default pattern matching dispatch function. This function defines how
  patterns are treated in `match` expressions. This function can be redefined to
  make pattern matching more powerful."
  (fn [x v]
    (cond
      (atom? x)
      [:Just {x v}]
      (some [(number? x) (keyword? x) (string? x)])
      (if (eq? x v) [:Just {}] :Nothing)
      :else
      (x v))))

(def /cons
  "A pattern for lists with a head."
  (fn [x-pat xs-pat]
    (fn [v]
      (if (list? v)
        (if (> (length v) 0)
          (maybe->>=
           (match-pat x-pat (head v))
           (fn [b1]
             (maybe->>=
              (match-pat xs-pat (tail v))
              (fn [b2]
                [:Just (<> b1 b2)]))))
          :Nothing)
        :Nothing))))

(def /nil
  "Empty-list pattern."
  (fn [v]
    (if (eq? v (list))
      [:Just {}]
      :Nothing)))

(def /?
  "Predicate pattern."
  (fn [p]
    (fn [v]
      (if (p v)
        [:Just {}]
        :Nothing))))

(def _
  "The wildcard pattern."
  (fn [v] [:Just {}]))
