(def match-pat
  "The pattern matching dispatch function. This function defines how patterns are
  treated in `match` expressions."
  (fn [x v]
    (cond
      (atom? x)
      [:Just {x v}]
      (some [(number? x) (keyword? x) (string? x)])
      (if (eq? x v) [:Just {}] :Nothing)
      :else
      (x v))))

(def _
  "The wildcard pattern."
  (fn [v] [:Just {}]))

(def /Just
  "Pattern which matches `[:Just x]`."
  (fn [pat]
    (fn [v]
      (if (vector? v)
        (if (eq? (length v) 2)
          (if (eq? (nth 0 v) :Just)
            (match-pat pat (nth 1 v))
            :Nothing)
          :Nothing)
        :Nothing))))

(def maybe->>=
  "Monadic bind for the maybe monad."
  (fn [xs f]
    (match xs
           (/Just 'x) (f x)
           :Nothing :Nothing)))

(def /cons
  "A pattern for lists with a head and a tail."
  (fn [x-pat xs-pat]
    (fn [v]
      (if (list? v)
        (if (> (length v) 0)
          (maybe->>=
           (match-pat x-pat (head v))
           (fn [b1]
             (maybe->>=
              (match-pat xs-pat (tail v))
              (fn [b2]
                [:Just (<> b1 b2)]))))
          :Nothing)
        :Nothing))))

(def /nil
  "Empty-list pattern."
  (fn [v]
    (if (eq? v (list))
      [:Just {}]
      :Nothing)))

(def /?
  "Predicate pattern."
  (fn [p]
    (fn [v]
      (if (p v)
        [:Just {}]
        :Nothing))))

(def-rec maybe-foldlM
  "Monadic fold over the elements of a seq, associating to the left (i.e. from
  left to right) in the maybe monad."
  (fn [f i xs]
    (if (empty-seq? xs)
      [:Just i]
      (maybe->>= (f i (nth 0 xs))
                 (fn [b] (maybe-foldlM f b (drop 1 xs)))))))

(def /keys
  "A pattern for matching values at specific keys in a dict."
  (fn [keys-pat]
    (fn [d]
      (if (dict? d)
        (maybe-foldlM
         (fn [acc kv]
           (def k (nth 0 kv))
           (def pat (nth 1 kv))
           (if (member? k d)
             (maybe->>= (match-pat pat (lookup k d))
                        (fn [bs] [:Just (<> acc bs)]))
             :Nothing))
         {}
         (seq keys-pat))
        :Nothing))))
